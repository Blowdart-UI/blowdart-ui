@typeparam T
    <EditForm EditContext="@_editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        @if (ShowStatusMessage)
        {
            <div class="alert @_statusClass">@_statusMessage</div>
        }
        @if (ShowHeader)
        {
            <h4>@HeaderText</h4>
            <hr />
        }
        @if (ShowSummary)
        {
            <ValidationSummary />
        }
        <DynamicValidator @ref="Validator" />
        @foreach (var member in Members)
        {
            if (member.Type == typeof(bool))
            {
                <div class="form-group">
                    <div class="checkbox">
                        <DynamicLabel Model="@Model" FieldName="@member.Name">
                            <DynamicInput Model="@Model" FieldName="@member.Name" Value="@GetValue(Model, member)" />
                        </DynamicLabel>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <DynamicLabel Model="@Model" FieldName="@member.Name" />
                    <DynamicInput Model="@Model" FieldName="@member.Name" CssClass="form-control" Value="@GetValue(Model, member)" />
                    <DynamicValidationMessage Model="@Model" FieldName="@member.Name" CssClass="text-danger" />
                </div>
            }
        }
        <button type="submit" class="btn btn-primary">@SubmitText</button>
    </EditForm>

@code
{
    [Parameter] public T Model { get; set; }
    [Parameter] public EventCallback<EditContext> OnSave { get; set; }
    [Parameter] public string HeaderText { get; set; }
    [Parameter] public string SubmitText { get; set; }
    [Parameter] public bool ShowSummary { get; set; } = true;
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowStatusMessage { get; set; } = true;
    [Parameter] public string SuccessMessage { get; set; } 
    [Parameter] public string FailureMessage { get; set; }

    public DynamicValidator Validator;
    public IEnumerable<AccessorMember> Members => PublicProperties();

    private string _statusMessage;
    private string _statusClass;
    private EditContext _editContext;

    private static AccessorMembers PublicProperties()
    {
        return AccessorMembers.Create(typeof(T), AccessorMemberTypes.Properties, AccessorMemberScope.Public);
    }

    protected override Task OnInitializedAsync()
    {
        HeaderText ??= GetHeaderText(Model.GetType());
        SuccessMessage ??= $"{HeaderText} was successfully saved.";
        FailureMessage ??= $"{HeaderText} did not save.";
        SubmitText ??= "Save";

        _editContext = new EditContext(Model);
        _editContext.OnFieldChanged += OnFieldChanged;
        return base.OnInitializedAsync();
    }

    protected void OnValidSubmit()
    {
        _statusClass = "alert-info";
        _statusMessage = SuccessMessage;
        OnSave.InvokeAsync(_editContext);
    }
 
    protected void OnInvalidSubmit()
    {
        _statusClass = "alert-danger";
        _statusMessage = FailureMessage;
    }

    private void OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        StateHasChanged(); // FIXME: only re-render the changed fields
    }

    private static string GetHeaderText(Type type)
    {
        var members = AccessorMembers.Create(type, AccessorMemberTypes.Properties, AccessorMemberScope.Public);
        return members.DisplayName;
    }

    private static object GetValue(object model, AccessorMember member)
    {
        var accessor = ReadAccessor.Create(typeof(T), AccessorMemberTypes.Properties, AccessorMemberScope.Public);
        accessor.TryGetValue(model, member.Name, out var value);
        return value;
    }

    public void AddError(string fieldName, string errorMessage)
    {
        Validator.AddError(_editContext, fieldName, errorMessage);
    }

}
